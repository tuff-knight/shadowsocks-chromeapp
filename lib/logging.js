// Generated by CoffeeScript 2.7.0
// Copyright (c) 2015 Sunny

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
var logging;

logging = {
  VERBOSE: 0x01, // For raw data transfer log
  DEBUG: 0x03, // For handshake, auth, cmd and transfer event log
  LOG: 0x07, // For SOCKS5 link establish log 
  INFO: 0x0F, // For generic error
  WARN: 0x1F, // For warning
  ERROR: 0x3F, // For unrecoverable error
  _empty: function() {},
  error: function(...msg) {
    logging.sendMessage(msg.join(' '));
    return console.error(...msg);
  },
  sendMessage: function(msg, responseCallback) {
    return chrome.runtime.sendMessage({
      type: "LOGMSG",
      data: {
        msg: msg,
        type: "danger"
      },
      timeout: 5000
    }, responseCallback);
  }
};

logging.setLevel = function(level) {
  console._verbose = (level & logging.VERBOSE) === level ? console.debug : logging._empty;
  console._debug = (level & logging.DEBUG) === level ? console.debug : logging._empty;
  console._log = (level & logging.LOG) === level ? console.log : logging._empty;
  console._info = (level & logging.INFO) === level ? console.info : logging._empty;
  console._warn = (level & logging.WARN) === level ? console.warn : logging._empty;
  console._error = (level & logging.ERROR) === level ? logging.error : logging._empty;
};

logging.setLevel(logging.WARN);
